{"version":3,"sources":["SidebarChat.js","Sidebar.js","axios.js","Chatwindow.js","App.js","serviceWorker.js","index.js"],"names":["SidebarChat","className","Avatar","Sidebar","src","IconButton","SearchOutlined","placeholder","type","instance","axios","create","baseURL","Chatwindow","messages","useState","input","setInput","sendMessage","event","a","preventDefault","post","message","name","timestamp","received","Date","toUTCString","AttachFile","map","value","onChange","target","onClick","App","setMessages","useEffect","get","then","response","data","channel","Pusher","cluster","subscribe","bind","newMessage","unbind_all","unsubscribe","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"waA0BeA,MAtBf,WACI,OAEI,yBAAKC,UAAU,sBAIX,kBAACC,EAAA,EAAD,MACA,yBAAKD,UAAU,4BACX,oCAIA,8CCmDDE,MA3Df,WACI,OAEI,yBAAKF,UAAU,WAGX,yBAAKA,UAAU,mBAGX,kBAACC,EAAA,EAAD,CAAQE,IAAI,2GAIZ,yBAAKH,UAAU,0BAGX,kBAACI,EAAA,EAAD,KACI,kBAAC,IAAD,OAIJ,kBAACA,EAAA,EAAD,KACI,kBAAC,IAAD,OAIJ,kBAACA,EAAA,EAAD,KACI,kBAAC,IAAD,SAOZ,yBAAKJ,UAAU,mBACX,yBAAKA,UAAU,8BACX,kBAACK,EAAA,EAAD,MACA,2BAAOC,YAAY,2BAA2BC,KAAK,WAI3D,yBAAKP,UAAU,4BACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,S,8GCtDDQ,E,OAJEC,EAAMC,OAAQ,CAC3BC,QAAQ,6CCgGGC,MA1Ff,YAAmC,IAAbC,EAAY,EAAZA,SAAY,EACNC,mBAAS,IADH,mBACzBC,EADyB,KAClBC,EADkB,KAG1BC,EAAW,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DAClBD,EAAME,iBADY,SAIZX,EAAMY,KAAK,gBAAiB,CAChCC,QAASP,EACTQ,KAAM,cACNC,UAAW,WACXC,UAAU,IARM,OAYlBT,EAAS,IAZS,2CAAH,sDAejB,OACE,yBAAKhB,UAAU,cACb,yBAAKA,UAAU,oBAIb,kBAACC,EAAA,EAAD,CAAQE,IAAI,0GAGZ,yBAAKH,UAAU,0BACb,2DACA,4CAAiB,IAAI0B,MAAOC,cAA5B,MAIF,yBAAK3B,UAAU,2BACb,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,OAGF,kBAACD,EAAA,EAAD,KACE,kBAACwB,EAAA,EAAD,OAGF,kBAACxB,EAAA,EAAD,KACE,kBAAC,IAAD,SAKN,yBAAKJ,UAAU,cACZa,EAASgB,KAAI,SAACP,GAAD,OACZ,uBACEtB,UAAS,0BACNsB,EAAQG,UAAY,mBAGvB,0BAAMzB,UAAU,cAAcsB,EAAQC,KAAtC,KACCD,EAAQA,QACT,0BAAMtB,UAAU,mBAAmBsB,EAAQE,gBAKjD,yBAAKxB,UAAU,gBACb,kBAACI,EAAA,EAAD,KACE,kBAAC,IAAD,OAGF,8BACE,2BACE0B,MAAOf,EACPgB,SAAU,SAACb,GAAD,OAAWF,EAASE,EAAMc,OAAOF,QAC3CvB,KAAK,OACLD,YAAY,sBAGd,4BAAQ2B,QAAShB,EAAaV,KAAK,YAGrC,kBAACH,EAAA,EAAD,KACE,kBAAC,IAAD,CAAU6B,QAAShB,KAGrB,kBAACb,EAAA,EAAD,KACE,kBAAC,IAAD,U,iBClDK8B,MAnCf,WAAgB,IAAD,EACmBpB,mBAAS,IAD5B,mBACND,EADM,KACIsB,EADJ,KAyBb,OAtBAC,qBAAU,WACR3B,EAAM4B,IAAI,kBAAkBC,MAAK,SAACC,GAChCJ,EAAYI,EAASC,WAEtB,IAEHJ,qBAAU,WACR,IAIMK,EAJS,IAAIC,IAAO,uBAAwB,CAChDC,QAAS,QAGYC,UAAU,YAIjC,OAHAH,EAAQI,KAAK,YAAY,SAACC,GACxBX,EAAY,GAAD,mBAAKtB,GAAL,CAAciC,QAEpB,WACLL,EAAQM,aACRN,EAAQO,iBAGT,CAACnC,IAGF,yBAAKb,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYa,SAAUA,OCxBVoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3C,c","file":"static/js/main.509055e0.chunk.js","sourcesContent":["import React from 'react';\nimport { Avatar } from '@material-ui/core';\nimport './SidebarChat.css';\n\nfunction SidebarChat() {\n    return (\n\n        <div className=\"sidebarchat__piece\">\n            \n            {/* Single chat piece contains a photo , name and last message */}\n            \n            <Avatar />\n            <div className=\"sidebarchat__piece__info\">\n                <h2>\n                    Name\n                </h2>\n\n                <p>\n                    Last message\n                </p>\n            </div>\n\n        </div>\n    )\n}\n\nexport default SidebarChat\n","import React from 'react';\nimport './Sidebar.css';\nimport ChatIcon from '@material-ui/icons/Chat';\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { Avatar, IconButton } from '@material-ui/core';\nimport { SearchOutlined } from '@material-ui/icons';\nimport SidebarChat from './SidebarChat';\n\nfunction Sidebar() {\n    return (\n        // side bar is the whole left section\n        <div className=\"sidebar\">\n\n            {/* sidebar__header -> represents the whole top header of left side */}\n            <div className=\"sidebar__header\">\n\n                {/* Avatar is also used by github  as we can see in the link*/}\n                <Avatar src=\"https://avatars1.githubusercontent.com/u/47029938?s=460&u=23917ce2d2709c132b0608fc3d3143c9b903dd08&v=4\" />\n\n\n                {/* sidebar__header__right -> represents the right box consisting of 3 icons */}\n                <div className=\"sidebar__header__right\">\n\n                    {/* DonutLargeIcon for STATUS OF WHATSAPP */}\n                    <IconButton>\n                        <DonutLargeIcon />\n                    </IconButton>\n\n                    {/* ChatIcon for CHAT OF WHATSAPP */}\n                    <IconButton>\n                        <ChatIcon />\n                    </IconButton>\n\n                    {/* MoreVertIcon for SETTINGS OF WHATSAPP */}\n                    <IconButton>\n                        <MoreVertIcon />\n                    </IconButton>\n                </div>\n\n            </div>\n\n\n            <div className=\"sidebar__search\">\n                <div className=\"sidebar__search__container\">\n                    <SearchOutlined/>\n                    <input placeholder=\"Search or start new chat\" type=\"text\"/>\n                </div>\n            </div>\n\n            <div className=\"sidebar__chat__component\">\n                <SidebarChat/>\n                <SidebarChat/>\n                <SidebarChat/>\n                <SidebarChat/>\n                <SidebarChat/>\n                <SidebarChat/>\n                <SidebarChat/>\n                <SidebarChat/>\n                <SidebarChat/>\n                <SidebarChat/>\n            </div>\n\n\n        </div>\n    )\n}\n\nexport default Sidebar\n","import axios from 'axios';\n\nconst instance = axios.create ({\n    baseURL:\"https://varunjeettwhatsapp.herokuapp.com\",\n});\n\nexport default instance;","import React, { useState } from \"react\";\nimport \"./Chatwindow.css\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport { SearchOutlined, AttachFile, MoreVert } from \"@material-ui/icons\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport MoodIcon from \"@material-ui/icons/Mood\";\nimport axios from \"./axios.js\";\n\nfunction Chatwindow({ messages }) {\n  const [input, setInput] = useState(\"\");\n\n  const sendMessage = async (event) => {\n    event.preventDefault();\n\n    // sending the message\n    await axios.post(\"/messages/new\", {\n      message: input,\n      name: \"Sender Name\",\n      timestamp: \"Just now\",\n      received: false,\n    });\n\n    //to again set input value to empty string\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"chatwindow\">\n      <div className=\"chatwindowheader\">\n        {/* header divided into three parts, left photo, middle info and right icons */}\n\n        {/* left photo */}\n        <Avatar src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRuLP-jSS1JAAHNj7g3XhCyWS2MMh_FKdfTZA&usqp=CAU\" />\n\n        {/* middle info */}\n        <div className=\"chatwindowheader__info\">\n          <h4>Abhijeet's Whatsapp is Live</h4>\n          <p>Last Seen At {new Date().toUTCString()} </p>\n        </div>\n\n        {/* right icon */}\n        <div className=\"chatwindowheader__right\">\n          <IconButton>\n            <SearchOutlined />\n          </IconButton>\n\n          <IconButton>\n            <AttachFile />\n          </IconButton>\n\n          <IconButton>\n            <MoreVert />\n          </IconButton>\n        </div>\n      </div>\n\n      <div className=\"chat__body\">\n        {messages.map((message) => (\n          <p\n            className={`chat__message  ${\n              !message.received && \"chat__receiver\"\n            }`}\n          >\n            <span className=\"chat__name\">{message.name} </span>\n            {message.message}\n            <span className=\"chat__timestamp\">{message.timestamp}</span>\n          </p>\n        ))}\n      </div>\n\n      <div className=\"chat__footer\">\n        <IconButton>\n          <MoodIcon />\n        </IconButton>\n\n        <form>\n          <input\n            value={input}\n            onChange={(event) => setInput(event.target.value)}\n            type=\"text\"\n            placeholder=\"Type your message\"\n          />\n\n          <button onClick={sendMessage} type=\"submit\"></button>\n        </form>\n\n        <IconButton>\n          <SendIcon onClick={sendMessage} />\n        </IconButton>\n\n        <IconButton>\n          <MicIcon />\n        </IconButton>\n      </div>\n    </div>\n  );\n}\n\nexport default Chatwindow;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Sidebar from \"./Sidebar.js\";\nimport Chatwindow from \"./Chatwindow.js\";\nimport Pusher from \"pusher-js\";\nimport axios from \"./axios.js\";\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    axios.get(\"/messages/sync\").then((response) => {\n      setMessages(response.data);\n    });\n  }, []);\n\n  useEffect(() => {\n    const pusher = new Pusher(\"5cc4966bdf755a32c0f6\", {\n      cluster: \"ap2\",\n    });\n\n    const channel = pusher.subscribe(\"messages\");\n    channel.bind(\"inserted\", (newMessage) => {\n      setMessages([...messages,newMessage]);\n    });\n    return () => {\n      channel.unbind_all();\n      channel.unsubscribe();\n    };\n\n  }, [messages]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_body\">\n        <Sidebar />\n        <Chatwindow messages={messages} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}